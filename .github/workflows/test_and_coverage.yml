name: Test and Coverage

on:
  workflow_call:
    inputs:
      python_environments:
        description: 'json list of Python environments'
        required: true
        type: string
        default: '[3.8,3.9]'

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  pyhon_matrix:
    runs-on: ubuntu-latest
    name: generate the list of python environments
    outputs:
      python_versions: ${{ steps.set_python.outputs.python_environments }}
    steps:
      - name: set python environments
        id: set_python
        run: |
          python_versions=$(echo '${{ inputs.python_environments }}' | jq -r '.[]' | tr '\n' ' ')
          echo "python_versions=${python_versions}" >> $GITHUB_ENV
      - name: print python versions
        run: |
          echo "${{ steps.set_python.outputs.python_versions }}"
      - name: print python environments
        run: |
          echo "${{ inputs.python_environments }}"

  build:
    runs-on: ubuntu-latest
    needs: pyhon_matrix
    strategy:
      matrix:
        python_versions: ${{ fromJson(needs.pyhon_matrix.outputs.python_environments) }}
    
    name: Execute unit testing and integration test for package deployment Python ${{ matrix.python_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python_version }}
  
      - name: Install dependencies
        run: |
          python -m pip install tox
  
      - name: Running testing on multiple test environments
        run: |
          tox -e py
  
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
              junit/test-results.xml
              
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: './coverage.xml'
          badge: true
          format: 'markdown'
          output: 'both'
  
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
  
      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY      